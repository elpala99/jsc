* About
In this document, the installation instruction for several packages and
applications are shown.

Most of the instructions for packages are source code compilations, as the
latest version is needed for most of the packages and the Ubuntu LTS
repositories are not updated. On the other hand, packages installed with apt
are still described just for my own purpose.

Furthermore, this document is written for users of all experiences with Linux,
hence every step is going to be detailed. Although this document started for
sharing and saving my installation process, feel welcomed to suggest any
changes or ask any questions.

This was done for Ubuntu 18.04 LTS.

* Minimal Installation
In this section, the instructions for a minimal install of my system can be
found. 
** Fixes
*** Mouse Fix
Fix right click, tested with ~gnome-tweaks~ v(3.28.1)
#+begin_src bash
sudo apt install gnome-tweaks
#+end_src

Over the keyboard and mouse section, change mouse emulation to area. Sometimes a
restart is required.

*** Fix Broken Dependencies
#+begin_src bash
sudo apt --fix-broken install
#+end_src

*** Brightness Controls
For *Intel* Driver, if ~xbacklight~ is not working for you, write in file
/etc/X11/xorg.conf:
#+BEGIN_SRC
Section "Device"
    Identifier  "Intel Graphics"
    Driver      "intel"
    Option      "Backlight"  "intel_backlight"
EndSection
#+END_SRC

For *Nvidia* driver, instead of using ~xbacklight~, install ~light~ v(1.2):
#+begin_src bash
wget -L https://github.com/haikarainen/light/releases/download/v1.2/light_1.2_amd64.deb
sudo dpkg -i light_1.2_amd64.deb
#+end_src

** Window Manager
*** i3 v(4.17.1)
#+begin_src bash
sudo apt install i3
#+end_src

*** i3-gaps v(4.17.1)
It is important to notice that ~i3-gaps~ does not need a previous installation
of ~i3~.
#+begin_src bash
sudo add-apt-repository ppa:kgilmer/speed-ricer
sudo apt update
sudo apt install i3-gaps
#+end_src

*** qtile v(0.15.1)
/Dependencies/
#+BEGIN_SRC bash
sudo apt install libxcb-render0-dev libffi-dev libcairo2 libpangocairo-1.0-0 libgirepository1.0-dev
#+END_SRC

The folder to save the qtile environment will be noted as $QTILE_ENV_FOLDER,
when this keyword is shown just replace it with the actual directory.
Furthermore, this installation was done with ~python3.8~ but using another
version would not change the procedure drastically.
#+begin_src bash
python3.8 -m venv $QTILE_ENV_FOLDER
source $QTILE_ENV_FOLDER/bin/activate
pip install xcffib && sudo pip install cairocffi
pip install PyGObject dbus-python qtile
#+end_src

After the creation of the virtual environment, create a file in
$QTILE_ENV_FOLDER, named qtile-venv-entry and write
#+begin_src bash
#!/bin/bash

source $QTILE_ENV_FOLDER/bin/activate
python3 $QTILE_ENV_FOLDER/bin/qtile $*
#+end_src

Lastly, create a file with root permisions in =/usr/share/xsessions/= named
qtile-venv.desktop and write
#+begin_src
[Desktop Entry]
Name=Qtile
Comment=Qtile Session Within Venv
Exec=$QTILE_ENV_FOLDER/qtile-venv-entry
Type=Application
Keywords=wm;tiling
#+end_src

** APPS
For this section, many apps will be installed directly from the source given by
the creator of the application. Hence, for apps installed in this way I highly
suggest having the source code in the =/opt= directory.

Furthermore, to have that application in the PATH I also suggest creating a
symbolic link in the folder =/usr/local/bin= by doing the following command
#+begin_src bash
cd /usr/local/bin
sudo ln -s /opt/DIR_TO_BINARY/binary
#+end_src

*** ST v(0.8.3)
[S]imple [T]erminal is a a highly customizable minimal terminal, developed with
the suckless philosphy. I constructed my own build of ST therefore the
instructions are guided to install my own build. For more information about this
terminal go to [[https://st.suckless.org/][ST page]].

To install my build do
#+begin_src bash
git clone https://github.com/juanscr/st
cd st && sudo make clean install
#+end_src

*** Brave Browser v(1.8.96)
/Dependencies/
#+begin_src bash
sudo apt install apt-transport-https curl
#+end_src

The instructions for the brave-browser installation can be found in [[https://brave-browser.readthedocs.io/en/latest/installing-brave.html#linux][brave
documentation]]. But, just for consistency, it can be done by
#+begin_src bash
curl -s https://brave-browser-apt-release.s3.brave.com/brave-core.asc | sudo apt-key --keyring /etc/apt/trusted.gpg.d/brave-browser-release.gpg add -
echo "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list
sudo apt update
sudo apt install brave-browser
#+end_src

*** Spotify v(1.1.26)
It is important to notice that there exists a ~snap~ package for ~spotify~. I
highly suggest to not use ~snap~, specially if spicetify is something you want
to use. You can check if there is a new version for spotify and change the
following link accordingly going to [[http://repository.spotify.com/pool/non-free/s/spotify-client/][spotify client]].
#+begin_src bash
wget -L http://repository.spotify.com/pool/non-free/s/spotify-client/spotify-client_1.1.26.501.gbe11e53b-15_amd64.deb
sudo dpkg -i spotify-client_1.1.26.601.gbe11e53b-15_amd64.deb
#+end_src

**** Spicetify v(0.9.9)
~spicetify~ allows to customize your Spotify, using different themes and
creating your own. To use it, do
#+begin_src bash
sudo chmod a+wr /usr/share/spotify
sudo chmod a+wr /usr/share/spotify/Apps -R
curl -fsSL https://raw.githubusercontent.com/khanhas/spicetify-cli/master/install.sh | sh
#+end_src

For the usage and themes, go to [[https://github.com/khanhas/spicetify-cli][spicetify git repository.]]

*** Emacs v(26.3)
/Dependencies/
#+begin_src bash
sudo apt install libx11-dev libxpm-dev libjpeg-dev libpng-dev libgif-dev libtiff-dev libgtk2.0-dev libtinfo-dev libncurses5-dev automake autoconf libgnutls28-dev mailutils libxaw7-dev
#+end_src

For this installation, do
#+begin_src bash
wget -L http://ftpmirror.gnu.org/emacs/emacs-26.3.tar.xz
tar xf emacs-26.3.tar.xz && cd emacs-26.3
./configure && sudo make
sudo make install
#+end_src

**** Doom Emacs (2.0.9)
~doom~ is a configuration framework for Emacs, which is the distribution of
Emacs I personally use. For more information go to [[https://github.com/hlissner/doom-emacs][doom emacs github repository.]]
The installation process can be also found in the previous repository. But the
instructions are:
#+begin_src bash
git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d
~/.emacs.d/bin/doom install
#+end_src
1. sxiv (26.0)
   * libexif-dev
   * fontconfig
   * freetype2-demos
   * libimlib2-dev
   * libxft-dev
   | ; Download tar from https://github.com/muennich/sxiv ;
   | ; Untar folder and move to .config ;
   | sudo make clean install
*** Installed using apt
1. ~okular~ v(1.3.3)
2. ~pavucontrol~ v(3.0)
3. ~zathura~ v(0.3.8)

I3 RELATED STUFF:
1. feh with apt (2.23.2)
2. scrot with apt (0.8)
3. betterlockscreen
  * libxcb-randr0-dev
  * libxcb-xrm-dev
  * libev-dev
  * libxcb-xinerama0-dev
  * libxcb-xkb-dev
  * libxcb-composite0-dev
  * libxcb-image0-dev
  * libxkbcommon-dev
  * libxkbcommon-x11-dev
  * libpam-cracklib
  * libpam-doc
  * libpam-modules
  * libpam-modules-bin
  * libpam-runtime
  * libpam0g-dev
  * checkinstall
  * i3lock-color
    * git clone https://github.com/PandorasFox/i3lock-color
    * git tag -f "git-$(git rev-parse --short HEAD)"
    * autoreconf -i && ./configure && make
    * sudo checkinstall --pkgname=i3lock-color --pkgversion=1 -y
  | git clone https://github.com/pavanjadhaw/betterlockscreen
  | sudo cp betterlockscreen /usr/local/bin
4. compton with apt (0.1)
5. xclip with apt (0.12)
6. polybar (3.4.3)
  * xcb-proto
  * cmake
  * libpulse-dev
  * libjsoncpp-dev
  * libxcb-xkb-dev
  * libxcb-xrm-dev
  * libxcb-cursor-dev
  * libmpdclient-dev
  * libnl-genl-3-dev
  * pkg-config
  * python3-sphinx
  * libcairo2-dev
  * libxcb1-dev
  * libxcb-util0-dev
  * libxcb-randr0-dev
  * libxcb-composite0-dev
  * python-xcbgen
  * libxcb-image0-dev
  * libxcb-ewmh-dev
  * libxcb-icccm4-dev
  | ; Download tar from git page ;
  | ./build.sh
  | Spotify module
    | https://github.com/mihirlad55/polybar-spotify-module
    | sudo apt install libdbus-1-dev
    | systemctl --user enable spotify-listener
    | systemctl --user start spotify-listener

Packages:
1. python (3.8.3)
  * build-essential
  * zlib1g-dev
  * libffi-dev
  * libreadline-gplv2-dev
  * libncursesw5-dev
  * libssl-dev
  * libsqlite3-dev
  * tk-dev
  * libgdbm-dev
  * libc6-dev
  * libbz2-dev
  | ; Download tar from python page. ;
  | ./configure --enable-optimizations
  | sudo make
  | sudo make install
2. texlive (2017.20180305)
  | sudo apt install texlive-full
3. ghcup (0.1.5)
  * curl
  * libgmp-dev
  * libncurses-dev
  | curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
4. agda (2.6.1)
  | cabal update
  | cabal install Agda
  | agda-mode setup
5. git with apt (2.17.1)
  | git config --global credential.helper store
  | git config --global core.editor "nvim"
6. R (3.6.1)
  * gfortran
  * libcurl4-openssl-dev
  | ; Download tar ball from R webpage. ;
  | ./configure --enable-R-shlib
  | sudo make
  | sudo make install

################### ADD ONS AND COSMETHIC ########################
; COSMETHIC ;
1. Theme
  | Install lxappeareance (0.6.3)
  | Select desired theme.
  | Download Moka Icons.
    | sudo add-apt-repository -u ppa:snwh/ppa
    | sudo apt install moka-icon-theme faba-icon-theme faba-mono-icons
  | Download Papirus Icons (recomended)
    | sudo add-apt-repository ppa:papirus/papirus
    | sudo apt update
    | sudo apt install papirus-icon-theme
  | Apply icon theme.
2. Load images at Pictures/wallpapers for random Background.
3. Fonts
  | Install Font-Awesome from:
  | https://fontawesome.com/how-to-use/on-the-desktop/setup/getting-started
  | Move otf files to ~/.local/share/fonts/

APPS:
1. vlc with apt (3.0.8)
2. ; Pycharm ;
  | Download tar
  | Move folder to /opt/
  | Add to path
3. ; Popcorn Time ;
  | sudo apt update && sudo apt install libcanberra-gtk-module libgconf-2-4
  | Install tar from active website.
  | Put it in /opt/
  | Add to path
4. libreoffice with apt (6.4.1)
5. arandr with apt (0.1.19)
6. inkscape with apt (0.92.3)
  -- EXTENSION: textext (0.11)
     | sudo apt install python2.7
     | sudo apt install python-gtk2 python-gtksourceview2
     | sudo apt install pdf2svg
     | ; Download tar from github https://github.com/textext/textext/releases ;
     | python2 setup.py
7. pdftk with snap (2.02)
8. teams (1.3.0)
  | ; Download deb from page ;
9. natron (2.3.14)
  | ; Download tgz from page ;
  | ; Run installer ;
10. netlogo (6.1.1)
  | ; Download tgz from page ;
  | ; Move to opt ;
11. repast symphony (2.7)
  | sudo apt install openjdk-8-jdk
  | ; Downaload Eclipse Commiters (2019.06) from page ;
  | ; Move it to opt ;
  | ; Using Eclipse install Eclipse Groovy Development tools and Groovy Compile 2.4 (only) ;
  | ; Install repast using Eclipse ;
  | ; Install vim plugin in plugin section ;
12. discord with snap (0.0.10)
13. stremio (4.4)
  * qml-module-qtwebengine
  * qml-module-qtwebchannel
  * qml-module-qt-labs-platform
  * libmpv1
  | ; Download deb from page ;
14. R-studio (1.2.5019)
  | ; Install deb from web. ;
  | sudo dpkg --ignore-depends=libclang-dev -i rstudio-1.2.5019-amd64.deb
  | sudo apt install -f
15. chrome (80.0)
  | sudo nano /etc/apt/sources.list.d/google-chrome.list
    | deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main
  | wget https://dl.google.com/linux/linux_signing_key.pub
  | sudo apt-key add linux_signing_key.pub
  | sudo apt update
  | rm linux_signing_key.pub
  | sudo apt install google-chrome-stable
16. ; virtualbox (6.1) ;
  * libqt5opengl5
  | Download deb from https://www.virtualbox.org/wiki/Linux_Downloads

PACKAGES:
1. xrandr (7.7)
  | sudo apt install x11-xserver-utils
2. wine (4.17)
  | sudo dpkg --add-architecture i386
  | wget -nc https://dl.winehq.org/wine-builds/winehq.key
  | sudo apt-key add winehq.key
  | sudo apt-add-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ bionic main'
  | sudo add-apt-repository ppa:cybermax-dexter/sdl2-backport
  | sudo apt update
  | sudo apt install --install-recommends winehq-stable
3. jupyter notebook (2.0.1)
  | sudo pip install jupyterlab
4. java (11.0.6)
  | sudo apt install default-jdk

; BACKUPS: ;
1. dotfiles (Based on https://www.atlassian.com/git/tutorials/dotfiles)
  | Startup:
    | git init --bare $HOME/folder/to/dotfiles
    | Add in bashrc:
      | alias dfiles='/usr/bin/git --git-dir=$HOME/folder/to/dotfiles --work-tree=$HOME'
    | dfiles config --local status.showUntrackedFiles no
    | dfiles remote add origin <git-link>
    | dfiles push --set-upstream origin master
  | Backup:
    | Add to the gitignore the folder your going to clone the git.
    | Check that the alias exists.
    | git clone --bare <git-link> $HOME/folder/to/dotfiles
    | dfiles config --local status.showUntrackedFiles no
    | dfiles checkout (Solve conflicts)
